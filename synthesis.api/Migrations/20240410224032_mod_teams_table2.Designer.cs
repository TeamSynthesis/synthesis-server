// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using synthesis.api.Data.Repository;

#nullable disable

namespace synthesis.api.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240410224032_mod_teams_table2")]
    partial class mod_teams_table2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("synthesis.api.Data.Models.FeatureModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("FeatureId");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.InviteModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("InvitedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("TeamId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.MemberModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("MemberId");

                    b.Property<DateTime?>("JoinedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Roles")
                        .HasColumnType("text[]");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.PrePlanModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("Plan")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("PrePlans");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.ProjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ProjectId");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.TaskToDoModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("TaskId");

                    b.Property<string>("Activity")
                        .HasColumnType("text");

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FeatureId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.TeamModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("TeamId");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SeatsAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int?>("GitHubId")
                        .HasColumnType("integer");

                    b.Property<int>("OnBoardingProgress")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<List<string>>("Skills")
                        .HasColumnType("text[]");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("GitHubId");

                    b.HasIndex("UserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.FeatureModel", b =>
                {
                    b.HasOne("synthesis.api.Data.Models.ProjectModel", "Project")
                        .WithMany("Features")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.InviteModel", b =>
                {
                    b.HasOne("synthesis.api.Data.Models.TeamModel", "Team")
                        .WithMany("Invites")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.MemberModel", b =>
                {
                    b.HasOne("synthesis.api.Data.Models.TeamModel", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("synthesis.api.Data.Models.UserModel", "User")
                        .WithMany("MemberProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.PrePlanModel", b =>
                {
                    b.HasOne("synthesis.api.Data.Models.TeamModel", "Team")
                        .WithMany("PrePlans")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.ProjectModel", b =>
                {
                    b.HasOne("synthesis.api.Data.Models.TeamModel", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("synthesis.api.Data.Models.PrePlanMetaData", "PrePlan", b1 =>
                        {
                            b1.Property<Guid>("ProjectModelId")
                                .HasColumnType("uuid");

                            b1.HasKey("ProjectModelId");

                            b1.ToTable("Projects");

                            b1.ToJson("PrePlan");

                            b1.WithOwner()
                                .HasForeignKey("ProjectModelId");

                            b1.OwnsOne("synthesis.api.Data.Models.Branding", "Branding", b2 =>
                                {
                                    b2.Property<Guid>("PrePlanMetaDataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Slogan")
                                        .HasColumnType("text");

                                    b2.HasKey("PrePlanMetaDataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("PrePlanMetaDataProjectModelId");

                                    b2.OwnsOne("synthesis.api.Data.Models.Image", "Icon", b3 =>
                                        {
                                            b3.Property<Guid>("BrandingPrePlanMetaDataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Description")
                                                .HasColumnType("text");

                                            b3.Property<string>("ImgUrl")
                                                .HasColumnType("text");

                                            b3.HasKey("BrandingPrePlanMetaDataProjectModelId");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("BrandingPrePlanMetaDataProjectModelId");
                                        });

                                    b2.OwnsOne("synthesis.api.Data.Models.Image", "MoodBoard", b3 =>
                                        {
                                            b3.Property<Guid>("BrandingPrePlanMetaDataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Description")
                                                .HasColumnType("text");

                                            b3.Property<string>("ImgUrl")
                                                .HasColumnType("text");

                                            b3.HasKey("BrandingPrePlanMetaDataProjectModelId");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("BrandingPrePlanMetaDataProjectModelId");
                                        });

                                    b2.OwnsOne("synthesis.api.Data.Models.ColorPalette", "Palette", b3 =>
                                        {
                                            b3.Property<Guid>("BrandingPrePlanMetaDataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<Dictionary<string, string>>("Accent")
                                                .HasColumnType("hstore");

                                            b3.Property<string>("PreviewUrl")
                                                .HasColumnType("text");

                                            b3.Property<Dictionary<string, string>>("Primary")
                                                .HasColumnType("hstore");

                                            b3.Property<string>("Reason")
                                                .HasColumnType("text");

                                            b3.Property<Dictionary<string, string>>("Secondary")
                                                .HasColumnType("hstore");

                                            b3.HasKey("BrandingPrePlanMetaDataProjectModelId");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("BrandingPrePlanMetaDataProjectModelId");
                                        });

                                    b2.OwnsOne("synthesis.api.Data.Models.Typography", "Typography", b3 =>
                                        {
                                            b3.Property<Guid>("BrandingPrePlanMetaDataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Font")
                                                .HasColumnType("text");

                                            b3.Property<string>("Reason")
                                                .HasColumnType("text");

                                            b3.HasKey("BrandingPrePlanMetaDataProjectModelId");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("BrandingPrePlanMetaDataProjectModelId");
                                        });

                                    b2.OwnsOne("synthesis.api.Data.Models.Wireframe", "Wireframe", b3 =>
                                        {
                                            b3.Property<Guid>("BrandingPrePlanMetaDataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Screen")
                                                .HasColumnType("text");

                                            b3.HasKey("BrandingPrePlanMetaDataProjectModelId");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("BrandingPrePlanMetaDataProjectModelId");

                                            b3.OwnsOne("synthesis.api.Data.Models.Image", "Image", b4 =>
                                                {
                                                    b4.Property<Guid>("WireframeBrandingPrePlanMetaDataProjectModelId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<string>("Description")
                                                        .HasColumnType("text");

                                                    b4.Property<string>("ImgUrl")
                                                        .HasColumnType("text");

                                                    b4.HasKey("WireframeBrandingPrePlanMetaDataProjectModelId");

                                                    b4.ToTable("Projects");

                                                    b4.WithOwner()
                                                        .HasForeignKey("WireframeBrandingPrePlanMetaDataProjectModelId");
                                                });

                                            b3.Navigation("Image");
                                        });

                                    b2.Navigation("Icon");

                                    b2.Navigation("MoodBoard");

                                    b2.Navigation("Palette");

                                    b2.Navigation("Typography");

                                    b2.Navigation("Wireframe");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.CompetitiveAnalysis", "CompetitiveAnalysis", b2 =>
                                {
                                    b2.Property<Guid>("PrePlanMetaDataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("PrePlanMetaDataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("PrePlanMetaDataProjectModelId");

                                    b2.OwnsMany("synthesis.api.Data.Models.Competitor", "Competitors", b3 =>
                                        {
                                            b3.Property<Guid>("CompetitiveAnalysisPrePlanMetaDataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Description")
                                                .HasColumnType("text");

                                            b3.Property<List<string>>("Features")
                                                .HasColumnType("text[]");

                                            b3.Property<string>("LogoUrl")
                                                .HasColumnType("text");

                                            b3.Property<string>("Name")
                                                .HasColumnType("text");

                                            b3.Property<string>("PricingModel")
                                                .HasColumnType("text");

                                            b3.Property<double>("ReviewSentiment")
                                                .HasColumnType("double precision");

                                            b3.Property<string>("Size")
                                                .HasColumnType("text");

                                            b3.Property<string>("Url")
                                                .HasColumnType("text");

                                            b3.HasKey("CompetitiveAnalysisPrePlanMetaDataProjectModelId", "Id");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("CompetitiveAnalysisPrePlanMetaDataProjectModelId");
                                        });

                                    b2.OwnsOne("synthesis.api.Data.Models.Swot", "Swot", b3 =>
                                        {
                                            b3.Property<Guid>("CompetitiveAnalysisPrePlanMetaDataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<List<string>>("Opportunities")
                                                .HasColumnType("text[]");

                                            b3.Property<List<string>>("Strengths")
                                                .HasColumnType("text[]");

                                            b3.Property<List<string>>("Threats")
                                                .HasColumnType("text[]");

                                            b3.Property<List<string>>("Weaknesses")
                                                .HasColumnType("text[]");

                                            b3.HasKey("CompetitiveAnalysisPrePlanMetaDataProjectModelId");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("CompetitiveAnalysisPrePlanMetaDataProjectModelId");
                                        });

                                    b2.OwnsOne("synthesis.api.Data.Models.TargetAudience", "TargetAudience", b3 =>
                                        {
                                            b3.Property<Guid>("CompetitiveAnalysisPrePlanMetaDataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.HasKey("CompetitiveAnalysisPrePlanMetaDataProjectModelId");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("CompetitiveAnalysisPrePlanMetaDataProjectModelId");

                                            b3.OwnsOne("synthesis.api.Data.Models.Demographics", "Demographics", b4 =>
                                                {
                                                    b4.Property<Guid>("TargetAudienceCompetitiveAnalysisPrePlanMetaDataProjectModelId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<string>("Age")
                                                        .HasColumnType("text");

                                                    b4.HasKey("TargetAudienceCompetitiveAnalysisPrePlanMetaDataProjectModelId");

                                                    b4.ToTable("Projects");

                                                    b4.WithOwner()
                                                        .HasForeignKey("TargetAudienceCompetitiveAnalysisPrePlanMetaDataProjectModelId");
                                                });

                                            b3.Navigation("Demographics");
                                        });

                                    b2.Navigation("Competitors");

                                    b2.Navigation("Swot");

                                    b2.Navigation("TargetAudience");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.Overview", "Overview", b2 =>
                                {
                                    b2.Property<Guid>("PrePlanMetaDataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Description")
                                        .HasColumnType("text");

                                    b2.HasKey("PrePlanMetaDataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("PrePlanMetaDataProjectModelId");

                                    b2.OwnsMany("synthesis.api.Data.Models.SuggestedDomain", "SuggestedDomains", b3 =>
                                        {
                                            b3.Property<Guid>("OverviewPrePlanMetaDataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Name")
                                                .HasColumnType("text");

                                            b3.Property<string>("Reason")
                                                .HasColumnType("text");

                                            b3.HasKey("OverviewPrePlanMetaDataProjectModelId", "Id");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("OverviewPrePlanMetaDataProjectModelId");
                                        });

                                    b2.OwnsMany("synthesis.api.Data.Models.SuggestedName", "SuggestedNames", b3 =>
                                        {
                                            b3.Property<Guid>("OverviewPrePlanMetaDataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Name")
                                                .HasColumnType("text");

                                            b3.Property<string>("Reason")
                                                .HasColumnType("text");

                                            b3.HasKey("OverviewPrePlanMetaDataProjectModelId", "Id");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("OverviewPrePlanMetaDataProjectModelId");
                                        });

                                    b2.Navigation("SuggestedDomains");

                                    b2.Navigation("SuggestedNames");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.Technology", "Technology", b2 =>
                                {
                                    b2.Property<Guid>("PrePlanMetaDataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("PrePlanMetaDataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("PrePlanMetaDataProjectModelId");

                                    b2.OwnsMany("synthesis.api.Data.Models.TechStack", "TechStacks", b3 =>
                                        {
                                            b3.Property<Guid>("TechnologyPrePlanMetaDataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Description")
                                                .HasColumnType("text");

                                            b3.Property<string>("LogoUrl")
                                                .HasColumnType("text");

                                            b3.Property<string>("Name")
                                                .HasColumnType("text");

                                            b3.Property<string>("Reason")
                                                .HasColumnType("text");

                                            b3.HasKey("TechnologyPrePlanMetaDataProjectModelId", "Id");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("TechnologyPrePlanMetaDataProjectModelId");
                                        });

                                    b2.Navigation("TechStacks");
                                });

                            b1.Navigation("Branding");

                            b1.Navigation("CompetitiveAnalysis");

                            b1.Navigation("Overview");

                            b1.Navigation("Technology");
                        });

                    b.Navigation("PrePlan");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.TaskToDoModel", b =>
                {
                    b.HasOne("synthesis.api.Data.Models.FeatureModel", "Feature")
                        .WithMany("Tasks")
                        .HasForeignKey("FeatureId");

                    b.HasOne("synthesis.api.Data.Models.MemberModel", "Member")
                        .WithMany("Tasks")
                        .HasForeignKey("MemberId");

                    b.HasOne("synthesis.api.Data.Models.ProjectModel", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Member");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.FeatureModel", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.MemberModel", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.ProjectModel", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.TeamModel", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Members");

                    b.Navigation("PrePlans");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.UserModel", b =>
                {
                    b.Navigation("MemberProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
