// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using synthesis.api.Data.Repository;

#nullable disable

namespace synthesis.api.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240212072654_added_projectmetadata_json_with_owned_navbuilder")]
    partial class added_projectmetadata_json_with_owned_navbuilder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MemberModelTeamModel", b =>
                {
                    b.Property<Guid>("DevelopersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamsId")
                        .HasColumnType("uuid");

                    b.HasKey("DevelopersId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("TeamMembers", (string)null);
                });

            modelBuilder.Entity("synthesis.api.Data.Models.MemberModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("MemberId");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Roles")
                        .HasColumnType("text[]");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.OrganisationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OrganisationId");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.ProjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ProjectId");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.TeamModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("TeamId");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("UserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MemberModelTeamModel", b =>
                {
                    b.HasOne("synthesis.api.Data.Models.MemberModel", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("synthesis.api.Data.Models.TeamModel", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("synthesis.api.Data.Models.MemberModel", b =>
                {
                    b.HasOne("synthesis.api.Data.Models.OrganisationModel", "Organisation")
                        .WithMany("Members")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("synthesis.api.Data.Models.UserModel", "User")
                        .WithMany("MemberProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.ProjectModel", b =>
                {
                    b.HasOne("synthesis.api.Data.Models.OrganisationModel", "Organisation")
                        .WithMany("Projects")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("synthesis.api.Data.Models.ProjectMetadata", "ProjectMetadata", b1 =>
                        {
                            b1.Property<Guid>("ProjectModelId")
                                .HasColumnType("uuid");

                            b1.HasKey("ProjectModelId");

                            b1.ToTable("Projects");

                            b1.ToJson("ProjectMetadata");

                            b1.WithOwner()
                                .HasForeignKey("ProjectModelId");

                            b1.OwnsOne("synthesis.api.Data.Models.Branding", "Branding", b2 =>
                                {
                                    b2.Property<Guid>("ProjectMetadataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Slogan")
                                        .HasColumnType("text");

                                    b2.HasKey("ProjectMetadataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectMetadataProjectModelId");

                                    b2.OwnsMany("synthesis.api.Data.Models.Icon", "Icons", b3 =>
                                        {
                                            b3.Property<Guid>("BrandingProjectMetadataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("ImgUrl")
                                                .HasColumnType("text");

                                            b3.Property<string>("Reason")
                                                .HasColumnType("text");

                                            b3.HasKey("BrandingProjectMetadataProjectModelId", "Id");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("BrandingProjectMetadataProjectModelId");
                                        });

                                    b2.Navigation("Icons");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.ColorPalette", "ColorPalette", b2 =>
                                {
                                    b2.Property<Guid>("ProjectMetadataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.Property<List<string>>("Neutral")
                                        .HasColumnType("text[]");

                                    b2.Property<List<string>>("Primary")
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Reason")
                                        .HasColumnType("text");

                                    b2.HasKey("ProjectMetadataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectMetadataProjectModelId");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.CompetitiveAnalysis", "CompetitiveAnalysis", b2 =>
                                {
                                    b2.Property<Guid>("ProjectMetadataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("ProjectMetadataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectMetadataProjectModelId");

                                    b2.OwnsMany("synthesis.api.Data.Models.Competitor", "Competitors", b3 =>
                                        {
                                            b3.Property<Guid>("CompetitiveAnalysisProjectMetadataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Description")
                                                .HasColumnType("text");

                                            b3.Property<List<string>>("Features")
                                                .HasColumnType("text[]");

                                            b3.Property<string>("LogoUrl")
                                                .HasColumnType("text");

                                            b3.Property<string>("Name")
                                                .HasColumnType("text");

                                            b3.Property<string>("PricingModel")
                                                .HasColumnType("text");

                                            b3.Property<int>("ReviewSentiment")
                                                .HasColumnType("integer");

                                            b3.Property<string>("Size")
                                                .HasColumnType("text");

                                            b3.Property<string>("Url")
                                                .HasColumnType("text");

                                            b3.HasKey("CompetitiveAnalysisProjectMetadataProjectModelId", "Id");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("CompetitiveAnalysisProjectMetadataProjectModelId");
                                        });

                                    b2.OwnsOne("synthesis.api.Data.Models.Swot", "Swot", b3 =>
                                        {
                                            b3.Property<Guid>("CompetitiveAnalysisProjectMetadataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<List<string>>("Opportunities")
                                                .HasColumnType("text[]");

                                            b3.Property<List<string>>("Strengths")
                                                .HasColumnType("text[]");

                                            b3.Property<List<string>>("Threats")
                                                .HasColumnType("text[]");

                                            b3.Property<List<string>>("Weaknesses")
                                                .HasColumnType("text[]");

                                            b3.HasKey("CompetitiveAnalysisProjectMetadataProjectModelId");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("CompetitiveAnalysisProjectMetadataProjectModelId");
                                        });

                                    b2.Navigation("Competitors");

                                    b2.Navigation("Swot");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.Features", "Features", b2 =>
                                {
                                    b2.Property<Guid>("ProjectMetadataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.Property<List<string>>("Could")
                                        .HasColumnType("text[]");

                                    b2.Property<List<string>>("Must")
                                        .HasColumnType("text[]");

                                    b2.Property<List<string>>("Should")
                                        .HasColumnType("text[]");

                                    b2.Property<List<string>>("Wont")
                                        .HasColumnType("text[]");

                                    b2.HasKey("ProjectMetadataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectMetadataProjectModelId");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.Mockups", "Mockups", b2 =>
                                {
                                    b2.Property<Guid>("ProjectMetadataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("ProjectMetadataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectMetadataProjectModelId");

                                    b2.OwnsMany("synthesis.api.Data.Models.Image", "Images", b3 =>
                                        {
                                            b3.Property<Guid>("MockupsProjectMetadataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Description")
                                                .HasColumnType("text");

                                            b3.Property<string>("ImgUrl")
                                                .HasColumnType("text");

                                            b3.HasKey("MockupsProjectMetadataProjectModelId", "Id");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("MockupsProjectMetadataProjectModelId");
                                        });

                                    b2.Navigation("Images");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.MoodBoard", "MoodBoard", b2 =>
                                {
                                    b2.Property<Guid>("ProjectMetadataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("ProjectMetadataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectMetadataProjectModelId");

                                    b2.OwnsMany("synthesis.api.Data.Models.Image", "Images", b3 =>
                                        {
                                            b3.Property<Guid>("MoodBoardProjectMetadataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Description")
                                                .HasColumnType("text");

                                            b3.Property<string>("ImgUrl")
                                                .HasColumnType("text");

                                            b3.HasKey("MoodBoardProjectMetadataProjectModelId", "Id");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("MoodBoardProjectMetadataProjectModelId");
                                        });

                                    b2.Navigation("Images");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.Overview", "Overview", b2 =>
                                {
                                    b2.Property<Guid>("ProjectMetadataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Description")
                                        .HasColumnType("text");

                                    b2.Property<string>("Title")
                                        .HasColumnType("text");

                                    b2.Property<string>("UserPrompt")
                                        .HasColumnType("text");

                                    b2.HasKey("ProjectMetadataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectMetadataProjectModelId");

                                    b2.OwnsMany("synthesis.api.Data.Models.SuggestedDomain", "SuggestedDomains", b3 =>
                                        {
                                            b3.Property<Guid>("OverviewProjectMetadataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Name")
                                                .HasColumnType("text");

                                            b3.Property<string>("Reason")
                                                .HasColumnType("text");

                                            b3.HasKey("OverviewProjectMetadataProjectModelId", "Id");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("OverviewProjectMetadataProjectModelId");
                                        });

                                    b2.OwnsMany("synthesis.api.Data.Models.SuggestedName", "SuggestedNames", b3 =>
                                        {
                                            b3.Property<Guid>("OverviewProjectMetadataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Name")
                                                .HasColumnType("text");

                                            b3.Property<string>("Reason")
                                                .HasColumnType("text");

                                            b3.HasKey("OverviewProjectMetadataProjectModelId", "Id");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("OverviewProjectMetadataProjectModelId");
                                        });

                                    b2.Navigation("SuggestedDomains");

                                    b2.Navigation("SuggestedNames");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.TargetAudience", "TargetAudience", b2 =>
                                {
                                    b2.Property<Guid>("ProjectMetadataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("ProjectMetadataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectMetadataProjectModelId");

                                    b2.OwnsOne("synthesis.api.Data.Models.Demographics", "Demographics", b3 =>
                                        {
                                            b3.Property<Guid>("TargetAudienceProjectMetadataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Age")
                                                .HasColumnType("text");

                                            b3.HasKey("TargetAudienceProjectMetadataProjectModelId");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("TargetAudienceProjectMetadataProjectModelId");
                                        });

                                    b2.Navigation("Demographics");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.Technology", "Technology", b2 =>
                                {
                                    b2.Property<Guid>("ProjectMetadataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Reason")
                                        .HasColumnType("text");

                                    b2.HasKey("ProjectMetadataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectMetadataProjectModelId");

                                    b2.OwnsMany("synthesis.api.Data.Models.TechStack", "TechStacks", b3 =>
                                        {
                                            b3.Property<Guid>("TechnologyProjectMetadataProjectModelId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Description")
                                                .HasColumnType("text");

                                            b3.Property<string>("LogoUrl")
                                                .HasColumnType("text");

                                            b3.Property<string>("Name")
                                                .HasColumnType("text");

                                            b3.HasKey("TechnologyProjectMetadataProjectModelId", "Id");

                                            b3.ToTable("Projects");

                                            b3.WithOwner()
                                                .HasForeignKey("TechnologyProjectMetadataProjectModelId");
                                        });

                                    b2.Navigation("TechStacks");
                                });

                            b1.OwnsOne("synthesis.api.Data.Models.Typography", "Typography", b2 =>
                                {
                                    b2.Property<Guid>("ProjectMetadataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Font")
                                        .HasColumnType("text");

                                    b2.Property<string>("Reason")
                                        .HasColumnType("text");

                                    b2.HasKey("ProjectMetadataProjectModelId");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectMetadataProjectModelId");
                                });

                            b1.OwnsMany("synthesis.api.Data.Models.Wireframe", "Wireframes", b2 =>
                                {
                                    b2.Property<Guid>("ProjectMetadataProjectModelId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .HasColumnType("text");

                                    b2.Property<string>("ImgUrl")
                                        .HasColumnType("text");

                                    b2.Property<string>("Screen")
                                        .HasColumnType("text");

                                    b2.HasKey("ProjectMetadataProjectModelId", "Id");

                                    b2.ToTable("Projects");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectMetadataProjectModelId");
                                });

                            b1.Navigation("Branding");

                            b1.Navigation("ColorPalette");

                            b1.Navigation("CompetitiveAnalysis");

                            b1.Navigation("Features");

                            b1.Navigation("Mockups");

                            b1.Navigation("MoodBoard");

                            b1.Navigation("Overview");

                            b1.Navigation("TargetAudience");

                            b1.Navigation("Technology");

                            b1.Navigation("Typography");

                            b1.Navigation("Wireframes");
                        });

                    b.Navigation("Organisation");

                    b.Navigation("ProjectMetadata");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.TeamModel", b =>
                {
                    b.HasOne("synthesis.api.Data.Models.ProjectModel", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.OrganisationModel", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("synthesis.api.Data.Models.UserModel", b =>
                {
                    b.Navigation("MemberProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
